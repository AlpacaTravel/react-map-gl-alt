import { describe } from 'mocha';
import { expect } from 'chai';
import sinon from 'sinon';
import Evented from '../../src/evented';

describe('Evented', () => {
  describe('contructor', () => {
    const on = sinon.spy();
    on.withArgs('resize');
    on.withArgs('remove');
    on.withArgs('render');
    on.withArgs('load');
    on.withArgs('error');
    on.withArgs('movestart');
    on.withArgs('moveend');
    on.withArgs('boxzoomend');
    on.withArgs('boxzoomstart');
    on.withArgs('dragstart');
    on.withArgs('dragend');
    on.withArgs('webglcontextlost');
    on.withArgs('webglcontextrestored');
    on.withArgs('dataloading');
    on.withArgs('mouseout');
    on.withArgs('mousedown');
    on.withArgs('mouseup');
    on.withArgs('mousemove');
    on.withArgs('click');
    on.withArgs('dblclick');
    on.withArgs('contextmenu');
    on.withArgs('touchstart');
    on.withArgs('touchend');
    on.withArgs('touchcanel');
    on.withArgs('move');
    on.withArgs('zoomstart');
    on.withArgs('zoomend');
    on.withArgs('zoom');
    on.withArgs('rotatestart');
    on.withArgs('rotate');
    on.withArgs('rotateend');
    on.withArgs('drag');
    on.withArgs('pitch');
    const evented = new Evented({ on });
    it('will register the events', () => {
      expect(on.withArgs('resize').calledOnce);
      expect(on.withArgs('remove').calledOnce);
      expect(on.withArgs('render').calledOnce);
      expect(on.withArgs('load').calledOnce);
      expect(on.withArgs('error').calledOnce);
      expect(on.withArgs('movestart').calledOnce);
      expect(on.withArgs('moveend').calledOnce);
      expect(on.withArgs('boxzoomend').calledOnce);
      expect(on.withArgs('boxzoomstart').calledOnce);
      expect(on.withArgs('dragstart').calledOnce);
      expect(on.withArgs('dragend').calledOnce);
      expect(on.withArgs('webglcontextlost').calledOnce);
      expect(on.withArgs('webglcontextrestored').calledOnce);
      expect(on.withArgs('dataloading').calledOnce);
      expect(on.withArgs('mouseout').calledOnce);
      expect(on.withArgs('mousedown').calledOnce);
      expect(on.withArgs('mouseup').calledOnce);
      expect(on.withArgs('mousemove').calledOnce);
      expect(on.withArgs('click').calledOnce);
      expect(on.withArgs('dblclick').calledOnce);
      expect(on.withArgs('contextmenu').calledOnce);
      expect(on.withArgs('touchstart').calledOnce);
      expect(on.withArgs('touchend').calledOnce);
      expect(on.withArgs('touchcanel').calledOnce);
      expect(on.withArgs('move').calledOnce);
      expect(on.withArgs('zoomstart').calledOnce);
      expect(on.withArgs('zoomend').calledOnce);
      expect(on.withArgs('zoom').calledOnce);
      expect(on.withArgs('rotatestart').calledOnce);
      expect(on.withArgs('rotate').calledOnce);
      expect(on.withArgs('rotateend').calledOnce);
      expect(on.withArgs('drag').calledOnce);
      expect(on.withArgs('pitch').calledOnce);
    });
  });
  describe('while notifying listeners', () => {
    it('will notify');
    it('will update event target with accessor');
  });
  it('will register listeners');
  it('will unregister listeners');
});
